<jqassistant-rules xmlns="http://schema.jqassistant.org/rule/v1.10">

    <group id="jmolecules-onion-classical:Strict">
        <includeConcept refId="jmolecules-onion-classical:AllowedRingDependency"/>
        <includeConstraint refId="jmolecules-onion-classical:IllegalRingDependency"/>
        <includeGroup refId="jmolecules-onion-classical:Default"/>
    </group>


    <concept id="jmolecules-onion-classical:AllowedRingDependency">
        <requiresConcept refId="jmolecules-onion-classical:PrepareRing"/>
        <description>Creates a :DEFINES_DEPENDENCY relation between :Ring nodes for each allowed dependency.</description>
        <cypher><![CDATA[
            WITH
              [
                ["Infrastructure", "ApplicationService"], ["Infrastructure", "DomainService"], ["Infrastructure", "DomainModel"],
                ["ApplicationService", "DomainService"], ["ApplicationService", "DomainModel"],
                ["DomainService", "DomainModel"]
            ] AS allowedDependencies
          UNWIND
            allowedDependencies AS allowedDependency
          MATCH
            (dependentRing:JMolecules:Architecture:Onion:Ring{name: allowedDependency[0]}),
            (dependencyRing:JMolecules:Architecture:Onion:Ring{name: allowedDependency[1]})
          MERGE
            (dependentRing)-[:DEFINES_DEPENDENCY]->(dependencyRing)
          RETURN
            dependentRing AS Source, dependencyRing AS Target
        ]]></cypher>
    </concept>

    <constraint id="jmolecules-onion-classical:IllegalRingDependency">
        <requiresConcept refId="jmolecules-onion-classical:AllowedRingDependency"/>
        <requiresConcept refId="jmolecules-onion-classical:RingDependency"/>
        <description>Checks that only allowed dependencies between rings are implemented.</description>
        <cypher><![CDATA[
          MATCH
            (dependentRing:JMolecules:Architecture:Onion:Ring)-[:DEPENDS_ON]->(dependencyRing:JMolecules:Architecture:Onion:Ring),
            (dependentRing)-[:CONTAINS]->(t1:Type),
            (dependencyRing)-[:CONTAINS]->(t2:Type),
            (t1)-[:DEPENDS_ON]->(t2)
          WHERE
            dependentRing <> dependencyRing AND
            NOT EXISTS((dependentRing)-[:DEFINES_DEPENDENCY]->(dependencyRing))
          RETURN
            dependentRing AS SourceRing, dependencyRing AS TargetRing, t1 AS SourceType, t2 AS TargetType
          ORDER BY
            SourceRing.name, TargetRing.name
        ]]></cypher>
        <report primaryColumn="SourceType"/>
    </constraint>

</jqassistant-rules>
